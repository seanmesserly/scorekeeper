openapi: 3.0.0
info:
  title: scorekeeper
  version: "1.0"
  description: Interact with courses, scorecards, players, and more
  license:
    name: MIT
  contact:
    name: Sean Messerly
    url: smess.me
    email: seanmesserly@gmail.com
servers:
  - url: http://localhost:3000
paths:
  /api/users/{userId}:
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      responses:
        "200":
          description: User Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "404":
          description: User Not Found

  /api/user:
    post:
      summary: Create New User
      description: Create a new user.
      operationId: post-user
      responses:
        "201":
          description: User Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Missing Required Information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Email Already Taken
        "500":
          description: Internal Server Error
      requestBody:
        $ref: "#/components/requestBodies/CreateUser"
    parameters: []
  /api/users/{userId}/scores:
    get:
      summary: Get User's Scores
      description: Get User's Scores
      operationId: get-user-scores
      responses:
        "200":
          description: Retrieved user's scores
          content:
            application/json:
              schema:
                type: object
                properties:
                  scoreCards:
                    type: array
                    items:
                      $ref: "#/components/schemas/ScoreCard"
        "404":
          description: User not found
      parameters:
        - schema:
            type: integer
          name: userId
          in: path
          required: true
          description: Id of an existing user.
  /api/users/{userId}/score:
    post:
      summary: Create New Score Card
      description: Create New Score Card
      operationId: post-user-score
      responses:
        "201":
          description: Score Card Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  scoreCard:
                    $ref: "#/components/schemas/ScoreCard"
        "400":
          description: Missing Required Information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      requestBody:
        $ref: "#/components/requestBodies/CreateScore"
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: ID of an existing user.
  /api/courses/{courseId}:
    parameters:
      - schema:
          type: integer
        name: courseId
        in: path
        required: true
        description: ID of an existing course.
    get:
      summary: Get Course Info by course ID
      tags: []
      responses:
        "200":
          description: Course Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  course:
                    $ref: "#/components/schemas/Course"

      operationId: get-api-course-courseid
      description: Retrieve the information of the course with the given ID.
  /api/course:
    post:
      summary: "Create New Course"
      operationId: post-api-course
      description: Create a new course.
      responses:
        "201":
          description: Course created
          content:
            application/json:
              schema:
                type: object
                properties:
                  course:
                    $ref: "#/components/schemas/Course"
        "400":
          description: Bad data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      requestBody:
        $ref: "#/components/requestBodies/CreateCourse"
  /api/courses/{courseId}/layouts:
    get:
      summary: Get Layouts For Course
      description: Get Layouts For Course
      operationId: get-course-layouts
      parameters:
        - schema:
            type: integer
          name: courseId
          in: path
          required: true
          description: ID of an existing course.
      responses:
        "200":
          description: Layouts returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  layouts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Layout"
        "404":
          description: Course not found
  /api/courses/{courseId}/layout:
    post:
      summary: Create Layout
      operationId: post-course-layout
      description: Create a new layout
      parameters:
        - schema:
            type: integer
          name: courseId
          in: path
          required: true
          description: ID of an existing course.
      responses:
        "201":
          description: Layout created
          content:
            application/json:
              schema:
                type: object
                properties:
                  layout:
                    $ref: "#/components/schemas/Layout"
        "409":
          description: Layout name already exists
      requestBody:
        $ref: "#/components/requestBodies/CreateLayout"
components:
  requestBodies:
    CreateUser:
      description: Fields to create a user
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
                format: email
          example:
            firstName: Sean
            lastName: Messerly
            email: smess@example.com
    CreateCourse:
      description: Fields to create a course
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              lat:
                type: number
              lon:
                type: number
              city:
                type: string
              state:
                type: string
          example:
            name: Sedgley Woods
            city: Philadelphia
            state: Pennsylvania
            lat: 39.95
            lon: -75.16
    CreateScore:
      description: Fields to create a score card
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              layoutId:
                type: integer
              scores:
                type: array
                items:
                  type: object
                  properties:
                    number:
                      type: integer
                    strokes:
                      type: integer
          example:
            lyoutId: 2
            scores:
              - number: 1
                strokes: 3
    CreateLayout:
      description: Fields to create a layout
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              holes:
                $ref: "#/components/schemas/Hole"
  schemas:
    Error:
      title: Error
      description: Error occurred
      type: object
      properties:
        error:
          type: string
      example:
        error: Bad request
    User:
      title: User
      type: object
      description: Application user
      example:
        id: 142
        firstName: Alice
        lastName: Smith
        email: alice.smith@gmail.com
        createDate: "2019-08-24"
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
    Course:
      title: Course
      type: object
      description: Disc golf course
      properties:
        id:
          type: integer
        name:
          type: string
        city:
          type: string
        state:
          type: string
        lat:
          type: number
        lon:
          type: number
      example:
        id: 1
        name: Sedgley Woods
        city: Philadelphia
        state: Pennsylvania
        lat: 39.95
        lon: -75.16
    Layout:
      title: Layout
      type: object
      description: Disc golf course configuration
      properties:
        name:
          type: string
        holes:
          type: array
          items:
            $ref: "#/components/schemas/Hole"
      example:
        name: Blue tees
        holes:
          - number: 1
            distance: 257
            par: 3
    Hole:
      title: Hole
      type: object
      description: Disc golf hole
      properties:
        number:
          type: integer
        distance:
          type: integer
        par:
          type: integer
      example:
        number: 9
        distance: 257
        par: 3
    ScoreCard:
      title: Score card
      description: Score card for a user on a given lyout
      type: object
      properties:
        courseId:
          type: integer
        layoutName:
          type: string
        scores:
          type: object
          properties:
            number:
              type: integer
            strokes:
              type: integer
      example:
        courseId: 1
        layoutName: Blue Tees
        scores:
          - number: 1
            strokes: 3
        